#cloud-config
# vim: ai et ts=2 sw=2

#hostname: instance_1.example.com
#fqdn: instance_1.example.com

ssh_keys:
  rsa_private: |
    ${indent(4, kubernetes_privkey)}
  rsa_public: ${kubernetes_key}

disable_root: false
ssh_authorized_keys:
  - ${user_key}
  - ${kubernetes_key}

packages:
  - ansible
  - git
  - vim
  - nano-
  - python3-pip
  - jq

write_files:
- path: /root/kubespray-install.sh
  content: |
    # am i master?
    grep -q kubenodes /var/run/cloud-init/instance-data.json || exit 0
    
    # prepare ssh client
    echo StrictHostKeyChecking no >> /root/.ssh/config
    ln -s /etc/ssh/ssh_host_rsa_key /root/.ssh/id_rsa
    ln -s /etc/ssh/ssh_host_rsa_key.pub /root/.ssh/id_rsa.pub
    
    # get kubespray
    KUBESPRAY=/root/kubespray
    git clone https://github.com/kubernetes-sigs/kubespray.git $KUBESPRAY
    cd $KUBESPRAY
    
    ### FROM KUBESPRAY
    # Install dependencies from ``requirements.txt``
    sudo pip3 install -r requirements.txt
    
    # Copy ``inventory/sample`` as ``inventory/mycluster``
    cp -rfp inventory/sample inventory/mycluster
    
    # Update Ansible inventory file with inventory builder
    declare -a IPS=$(jq -r '.ds.ec2_metadata."local-ipv4", .ds.meta_data.meta.kubenodes' /var/run/cloud-init/instance-data.json)
    CONFIG_FILE=inventory/mycluster/hosts.yaml python3 contrib/inventory_builder/inventory.py $${IPS[@]}
    
    # Review and change parameters under ``inventory/mycluster/group_vars``
    #cat inventory/mycluster/group_vars/all/all.yml
    #cat inventory/mycluster/group_vars/k8s_cluster/k8s-cluster.yml
    
    # Deploy Kubespray with Ansible Playbook - run the playbook as root
    # The option `--become` is required, as for example writing SSL keys in /etc/,
    # installing packages and interacting with various systemd daemons.
    # Without --become the playbook will fail to run!
    ansible-playbook -i inventory/mycluster/hosts.yaml  --become --become-user=root cluster.yml

runcmd:
  - /bin/bash -x /root/kubespray-install.sh

